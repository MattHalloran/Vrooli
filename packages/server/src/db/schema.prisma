//==============================================================
// #region Prisma Configuration
//==============================================================
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}

//==============================================================
// #endregion
//==============================================================

//==============================================================
// #region Comment
//==============================================================
// Comments can be submitted by either a user or an organization.
// They can be associated with a project, routine, or standard.
//==============================================================

model comment {
    id             String                @id @default(uuid()) @db.Uuid
    created_at     DateTime              @default(now()) @db.Timestamptz(6)
    updated_at     DateTime              @default(now()) @db.Timestamptz(6)
    userId         String?               @db.Uuid // Comment posted BY a user
    organizationId String?               @db.Uuid // Comment posted BY an organization
    projectId      String?               @db.Uuid // Comment posted TO a project
    routineId      String?               @db.Uuid // Comment posted TO a routine
    standardId     String?               @db.Uuid // Comment posted TO a standard
    user           user?                 @relation(fields: [userId], references: [id])
    organization   organization?         @relation(fields: [organizationId], references: [id])
    project        project?              @relation(fields: [projectId], references: [id], onDelete: Cascade)
    routine        routine?              @relation(fields: [routineId], references: [id], onDelete: Cascade)
    standard       standard?             @relation(fields: [standardId], references: [id], onDelete: Cascade)
    reports        report[]
    stars          Int                   @default(0) // Count of all stars. Makes queries easier than counting the relationship every time
    starredBy      star[]                @relation("star_comment")
    score          Int                   @default(0) // Count of all upvotes - downvotes. Easier to store than calculate on the fly.
    translations   comment_translation[]
    votes          vote[]                @relation("vote_comment")
}

model comment_translation {
    id        String  @id @default(uuid()) @db.Uuid
    text      String  @db.VarChar(2048)
    language  String  @db.VarChar(3) // ISO 639-2 language code
    commentId String  @db.Uuid
    comment   comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

    @@unique([commentId, language])
}

//==============================================================
// #endregion
//==============================================================

//==============================================================
// #region Email
//==============================================================

//==============================================================
// #region Email
//==============================================================
// Email data
model email {
    id                                 String    @id @default(uuid()) @db.Uuid
    emailAddress                       String    @unique @db.Citext()
    receivesAccountUpdates             Boolean   @default(true) // Account-level notifications
    receivesBusinessUpdates            Boolean   @default(true) // Newsletters, promos, etc.
    verified                           Boolean   @default(false)
    lastVerifiedTime                   DateTime? @db.Timestamptz(6)
    verificationCode                   String?   @unique @db.VarChar(256)
    lastVerificationCodeRequestAttempt DateTime? @db.Timestamptz(6)
    userId                             String?   @db.Uuid
    user                               user?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//==============================================================
// #endregion
//==============================================================

// ADA Handle
model handle {
    id       String  @id @default(uuid()) @db.Uuid
    handle   String? @unique @db.VarChar(16)
    walletId String? @db.Uuid
    wallet   wallet? @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

//==============================================================
// #region Node
//==============================================================
// Nodes describe the structure of a routine orchestration.
// Nodes come in 4 varieties:
// 1. END - A node that ends the routine. Must not have a next node.
// 2. REDIRECT - A redirect to a node earlier in the routine. These are created automatically when someone makes a link to an earlier object
// 3. ROUTINE_LIST - A list of routines
// 4. START - The start node
//==============================================================

// One item in a routine orchestration
model node {
    id              String             @id @default(uuid()) @db.Uuid
    created_at      DateTime           @default(now()) @db.Timestamptz(6)
    updated_at      DateTime           @default(now()) @db.Timestamptz(6)
    columnIndex     Int? // Column number in the routine (start node at 0)
    rowIndex        Int? // Row number in its column (top down from 0)
    type            NodeType
    routineId       String             @db.Uuid
    nodeEnd         node_end?
    loop            node_loop?
    nodeRoutineList node_routine_list?
    routine         routine            @relation(fields: [routineId], references: [id], onDelete: Cascade)
    translations    node_translation[]
    previous        node_link[]        @relation("node_previous")
    next            node_link[]        @relation("node_next")
    runSteps        run_step[]
}

model node_translation {
    id          String  @id @default(uuid()) @db.Uuid
    description String? @db.VarChar(2048)
    title       String  @default("Name Me") @db.VarChar(128)
    language    String  @db.VarChar(3) // ISO 639-2 language code
    nodeId      String  @db.Uuid
    node        node    @relation(fields: [nodeId], references: [id], onDelete: Cascade)

    @@unique([nodeId, language])
}

// Data for end nodes (in addition to fields defined by node table)
model node_end {
    id            String  @id @default(uuid()) @db.Uuid
    wasSuccessful Boolean @default(true)
    nodeId        String  @unique @db.Uuid
    node          node    @relation(fields: [nodeId], references: [id], onDelete: Cascade)
}

// Links two nodes together
// Any nodes that are not linked can still be associated with a routine,
// but they will be put in an "unlinked" state and the routine will not be able to be run
model node_link {
    id        String           @id @default(uuid()) @db.Uuid
    fromId    String           @db.Uuid
    routineId String           @db.Uuid
    toId      String           @db.Uuid
    operation String?          @db.VarChar(512) // Optional operation to perform on when conditions (e.g. AND(1, 2) OR(3,4))
    whens     node_link_when[]
    from      node             @relation("node_previous", fields: [fromId], references: [id], onDelete: Cascade)
    routine   routine          @relation(fields: [routineId], references: [id], onDelete: Cascade)
    to        node             @relation("node_next", fields: [toId], references: [id], onDelete: Cascade)
}

// A specific condition for a link to be available. If all links fail their conditions, then the user cannot proceed
model node_link_when {
    id           String                       @id @default(uuid()) @db.Uuid
    linkId       String                       @db.Uuid
    link         node_link                    @relation(fields: [linkId], references: [id], onDelete: Cascade)
    translations node_link_when_translation[]
    condition    String                       @db.VarChar(8192)
}

model node_link_when_translation {
    id          String         @id @default(uuid()) @db.Uuid
    description String?        @db.VarChar(2048)
    title       String         @db.VarChar(128)
    language    String         @db.VarChar(3) // ISO 639-2 language code
    whenId      String         @db.Uuid
    when        node_link_when @relation(fields: [whenId], references: [id], onDelete: Cascade)

    @@unique([whenId, language])
}

// A special type of link that repeats a node multiple times.
// A loop is linked to a single node. If you need multiple nodes to repeat, you must put them inside a subroutine
model node_loop {
    id        String            @id @default(uuid()) @db.Uuid
    loops     Int?              @default(1) // Number of times to loop
    maxLoops  Int?              @default(1) // Maximum number of times to loop
    whiles    node_loop_while[] // Conditions which must be true for loop to continue
    operation String?           @db.VarChar(512) // Optional operation to perform on while conditions (e.g. AND(1, 2) OR(3,4))
    nodeId    String            @unique @db.Uuid
    node      node              @relation(fields: [nodeId], references: [id], onDelete: Cascade)
}

// A specific "while" condition in a loop node
model node_loop_while {
    id           String                        @id @default(uuid()) @db.Uuid
    loopId       String                        @db.Uuid
    loop         node_loop                     @relation(fields: [loopId], references: [id], onDelete: Cascade)
    translations node_loop_while_translation[]
    condition    String                        @db.VarChar(8192) // JSON object describing operation on inputs/outputs/user data
}

model node_loop_while_translation {
    id          String          @id @default(uuid()) @db.Uuid
    description String          @db.VarChar(2048)
    title       String          @db.VarChar(128)
    language    String          @db.VarChar(3) // ISO 639-2 language code
    whileId     String          @db.Uuid
    while       node_loop_while @relation(fields: [whileId], references: [id], onDelete: Cascade)
}

//

// Data for routine list nodes (in addition to fields defined by node table)
model node_routine_list {
    id         String                   @id @default(uuid()) @db.Uuid
    isOrdered  Boolean                  @default(false)
    isOptional Boolean                  @default(false)
    routines   node_routine_list_item[]
    nodeId     String                   @unique @db.Uuid
    node       node                     @relation(fields: [nodeId], references: [id], onDelete: Cascade)
}

// Many-to-many relationship between routine lists and routines
model node_routine_list_item {
    id           String                               @id @default(uuid()) @db.Uuid
    index        Int?                                 @default(0) // Index, if list is ordered
    isOptional   Boolean                              @default(false)
    listId       String                               @db.Uuid
    routineId    String                               @db.Uuid
    list         node_routine_list                    @relation(fields: [listId], references: [id], onDelete: Cascade)
    routine      routine                              @relation(fields: [routineId], references: [id], onDelete: Cascade)
    translations node_routine_list_item_translation[]

    @@unique([listId, routineId], name: "node_routine_list_item_listid_routineid_unique")
}

model node_routine_list_item_translation {
    id          String                 @id @default(uuid()) @db.Uuid
    description String?                @db.VarChar(2048) // Optional description to override routine description
    title       String?                @db.VarChar(128) // Optional title to override routine title
    language    String                 @db.VarChar(3) // ISO 639-2 language code
    itemId      String                 @db.Uuid
    item        node_routine_list_item @relation(fields: [itemId], references: [id], onDelete: Cascade)

    @@unique([itemId, language])
}

//==============================================================
// #endregion
//==============================================================

//==============================================================
// #region Organization
//==============================================================
// An organization is any group of one or more users that work
// together to accomplish a common goal/goals. In the crypto
// world, these are preferably Decentralized Autonomous
// Organizations (DAOs). But any organization can use this platform.
//==============================================================

model organization {
    id                 String                     @id @default(uuid()) @db.Uuid
    created_at         DateTime                   @default(now()) @db.Timestamptz(6)
    updated_at         DateTime                   @default(now()) @db.Timestamptz(6)
    handle             String?                    @unique @db.VarChar(16) // Must match ADA Handle of verified wallet linked to user
    isOpenToNewMembers Boolean                    @default(false) // If looking for open-source contributors or team members. Paid or unpaid
    stars              Int                        @default(0) // Count of all stars. Makes queries easier than counting the relationship every time
    views              Int                        @default(0) // Count of all views. Makes queries easier than counting the relationship every time
    comments           comment[]
    members            organization_users[]
    projects           project[]                  @relation("project_organization_owner") // Projects the organization can contorl
    projectsCreated    project[]                  @relation("project_organization_creator") // Projects the organization created, but cannot necessarily control
    reports            report[]
    resourceLists      resource_list[]
    routines           routine[]                  @relation("routine_organization_owner") // Routines the organization can control
    routinesCreated    routine[]                  @relation("routine_organization_creator") // Routines the organization created, but cannot necessarily control
    standards          standard[]
    starredBy          star[]                     @relation("star_organization")
    tags               organization_tags[] // Categorical tags set by creators or community-voted
    translations       organization_translation[]
    viewedBy           view[]                     @relation("view_organization")
    wallets            wallet[]
}

model organization_translation {
    id             String       @id @default(uuid()) @db.Uuid
    bio            String?      @db.VarChar(2048)
    name           String       @db.VarChar(128)
    language       String       @db.VarChar(3) // ISO 639-2 language code
    organizationId String       @db.Uuid
    organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    @@unique([organizationId, language])
}

// Many-to-many relationship between organizations and tags
model organization_tags {
    id       String       @id @default(uuid()) @db.Uuid
    taggedId String       @db.Uuid
    tagId    String       @db.Uuid
    tagged   organization @relation(fields: [taggedId], references: [id], onDelete: Cascade)
    tag      tag          @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@unique([taggedId, tagId], name: "organization_tags_taggedid_tagid_unique")
}

// Many-to-many relationship between organizaitons and users
model organization_users {
    id             String       @id @default(uuid()) @db.Uuid
    organizationId String       @db.Uuid
    userId         String       @db.Uuid
    role           MemberRole   @default(Member)
    organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    user           user         @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([organizationId, userId], name: "organization_users_organizationid_userid_unique")
}

//==============================================================
// #endregion
//==============================================================

//==============================================================
// #region Project
//==============================================================

// A project is "owned" by an organization and/or user,
// and it can be "starred" by many users
model project {
    id                      String                @id @default(uuid()) @db.Uuid
    created_at              DateTime              @default(now()) @db.Timestamptz(6)
    updated_at              DateTime              @default(now()) @db.Timestamptz(6)
    isComplete              Boolean               @default(false) // If the project is complete, or in a working state. Determined by the user
    completedAt             DateTime?             @db.Timestamptz(6) // If the project is complete, this is the time it was completed
    score                   Int                   @default(0) // Count of all upvotes - downvotes. Easier to store than calculate on the fly.
    stars                   Int                   @default(0) // Count of all stars. Makes queries easier than counting the relationship every time
    views                   Int                   @default(0) // Count of all views. Makes queries easier than counting the relationship every time
    createdByUserId         String?               @db.Uuid // User who created this
    createdByOrganizationId String?               @db.Uuid // Organization who created this
    handle                  String?               @unique @db.VarChar(16) // Must match ADA Handle of verified wallet linked to user
    userId                  String?               @db.Uuid // User who can edit this
    organizationId          String?               @db.Uuid // Organization who can edit this
    parentId                String?               @db.Uuid // Parent project, if any
    createdByUser           user?                 @relation("project_user_creator", fields: [createdByUserId], references: [id], onDelete: Cascade)
    createdByOrganization   organization?         @relation("project_organization_creator", fields: [createdByOrganizationId], references: [id], onDelete: Cascade)
    user                    user?                 @relation("project_user_owner", fields: [userId], references: [id], onDelete: Cascade)
    organization            organization?         @relation("project_organization_owner", fields: [organizationId], references: [id], onDelete: Cascade)
    comments                comment[]
    forks                   project[]             @relation("project_fork")
    parent                  project?              @relation("project_fork", fields: [parentId], references: [id], onDelete: SetNull)
    reports                 report[]
    resourceLists           resource_list[]
    routines                routine[] // Routines created by this project
    starredBy               star[]                @relation("star_project")
    tags                    project_tags[] // Categorical tags set by creators or community-voted
    translations            project_translation[]
    votes                   vote[]                @relation("vote_project")
    viewedBy                view[]                @relation("view_project")
    wallets                 wallet[]
}

model project_translation {
    id          String  @id @default(uuid()) @db.Uuid
    description String? @db.VarChar(2048)
    name        String  @db.VarChar(128)
    language    String  @db.VarChar(3) // ISO 639-2 language code
    projectId   String  @db.Uuid
    project     project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@unique([projectId, language])
}

// Many-to-many relationship between projects and tags
model project_tags {
    id       String  @id @default(uuid()) @db.Uuid
    taggedId String  @db.Uuid
    tagId    String  @db.Uuid
    tagged   project @relation(fields: [taggedId], references: [id], onDelete: Cascade)
    tag      tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@unique([taggedId, tagId], name: "project_tags_taggedid_tagid_unique")
}

//==============================================================
// #endregion
//==============================================================

//==============================================================
// #region Report
//==============================================================

model report {
    id             String        @id @default(uuid()) @db.Uuid
    reason         String        @db.VarChar(128)
    details        String?       @db.VarChar(1024)
    language       String        @db.VarChar(3) // ISO 639-2 language code
    created_at     DateTime      @default(now()) @db.Timestamptz(6)
    fromId         String        @db.Uuid
    from           user          @relation("report_from", fields: [fromId], references: [id], onDelete: Cascade)
    commentId      String?       @db.Uuid
    organizationId String?       @db.Uuid
    projectId      String?       @db.Uuid
    routineId      String?       @db.Uuid
    standardId     String?       @db.Uuid
    tagId          String?       @db.Uuid
    userId         String?       @db.Uuid
    comment        comment?      @relation(fields: [commentId], references: [id], onDelete: Cascade)
    organization   organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    project        project?      @relation(fields: [projectId], references: [id], onDelete: Cascade)
    routine        routine?      @relation(fields: [routineId], references: [id], onDelete: Cascade)
    standard       standard?     @relation(fields: [standardId], references: [id], onDelete: Cascade)
    tag            tag?          @relation(fields: [tagId], references: [id], onDelete: Cascade)
    user           user?         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//==============================================================
// #endregion
//==============================================================

//==============================================================
// #region Resource
//==============================================================
// A resource is a link or address that provides context to
// whatever object it is associated with. This may be a user's social
// media links, a project's website, a routine's instruction video, etc.
// A resource can be of the following types:
// - AdaHandle - Must start with "$". See https://adahandle.com/
// - Cardano RECEIVE address - Must start with "addr:"
// - An IPFS address - Must start with "ipfs:"
// - A typical url - Must start with "http://", "https://", or "www."
//==============================================================

model resource {
    id           String                 @id @default(uuid()) @db.Uuid
    created_at   DateTime               @default(now()) @db.Timestamptz(6)
    updated_at   DateTime               @default(now()) @db.Timestamptz(6)
    index        Int?                   @default(0) // Index in resource list, if any
    link         String                 @db.VarChar(1024) // The actual link
    usedFor      ResourceUsedFor        @default(Context)
    listId       String                 @db.Uuid
    list         resource_list          @relation(fields: [listId], references: [id], onDelete: Cascade)
    translations resource_translation[]
}

model resource_translation {
    id          String   @id @default(uuid()) @db.Uuid
    description String?  @db.VarChar(2048)
    title       String?  @db.VarChar(128)
    language    String   @db.VarChar(3) // ISO 639-2 language code
    resourceId  String   @db.Uuid
    resource    resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

    @@unique([resourceId, language])
}

// A list of resources
model resource_list {
    id             String                      @id @default(uuid()) @db.Uuid
    created_at     DateTime                    @default(now()) @db.Timestamptz(6)
    updated_at     DateTime                    @default(now()) @db.Timestamptz(6)
    index          Int?                        @default(0) // Index in list of lists, if any
    usedFor        ResourceListUsedFor         @default(Display) // Allows ui to determine which lists aren't deletable (e.g. list displayed on learn dashboard)
    organizationId String?                     @db.Uuid
    projectId      String?                     @db.Uuid
    routineId      String?                     @db.Uuid
    userId         String?                     @db.Uuid
    organization   organization?               @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    project        project?                    @relation(fields: [projectId], references: [id], onDelete: Cascade)
    routine        routine?                    @relation(fields: [routineId], references: [id], onDelete: Cascade)
    user           user?                       @relation(fields: [userId], references: [id], onDelete: Cascade)
    resources      resource[]
    translations   resource_list_translation[]
}

model resource_list_translation {
    id          String        @id @default(uuid()) @db.Uuid
    description String?       @db.VarChar(512)
    title       String?       @db.VarChar(128)
    language    String        @db.VarChar(3) // ISO 639-2 language code
    listId      String        @db.Uuid
    list        resource_list @relation(fields: [listId], references: [id], onDelete: Cascade)

    @@unique([listId, language])
}

//==============================================================
// #endregion
//==============================================================

//==============================================================
// #region Role
//==============================================================

// A user role. Each user can have multiple roles
model role {
    id          String       @id @default(uuid()) @db.Uuid
    title       String       @unique @db.VarChar(128)
    description String?      @db.VarChar(2048)
    created_at  DateTime     @default(now()) @db.Timestamptz(6)
    updated_at  DateTime     @default(now()) @db.Timestamptz(6)
    users       user_roles[]
}

//==============================================================
// #endregion
//==============================================================

//==============================================================
// #region Routine
//==============================================================
// The most important object in the system. A routine is a way to
// describe the process for completing some task. It may consist of
// subroutines, which are themselves routines.
// A routine is owned by either a user or organization. It can be
// transferred to another user or organization.
//==============================================================

model routine {
    id                      String                   @id @default(uuid()) @db.Uuid
    created_at              DateTime                 @default(now()) @db.Timestamptz(6)
    updated_at              DateTime                 @default(now()) @db.Timestamptz(6)
    completedAt             DateTime?                @db.Timestamptz(6) // If the routine is complete, this is the time it was completed
    complexity              Int                      @default(1) // complexity = 1 + (complexity of each subroutine) along the longest path
    isAutomatable           Boolean                  @default(false) // Indicates if the routine can be run automatically, if all conditions are met
    isComplete              Boolean                  @default(true) // If the routine is complete, or in a working state. Determined by the user
    isInternal              Boolean                  @default(false) // Indicates if the routine should appear in searches, or if it is only meant to be a subnode of another routine
    score                   Int                      @default(0) // Count of all upvotes - downvotes. Easier to store than calculate on the fly.
    simplicity              Int                      @default(1) // Opposite of completixy - 1 + (complexity of each subroutine) along the shortest path
    stars                   Int                      @default(0) // Count of all stars. Makes queries easier than counting the relationship every time
    timesStarted            Int                      @default(0) // Count of times the routine was started. Includes times started as subroutine, but excludes runs by the owner
    timesCompleted          Int                      @default(0) // Count of times the routine was completed. Includes times completed as subroutine, but excludes runs by the owner
    views                   Int                      @default(0) // Count of all views. Makes queries easier than counting the relationship every time
    createdByUserId         String?                  @db.Uuid // User who created this routine
    createdByOrganizationId String?                  @db.Uuid // Organization who created this routine
    organizationId          String?                  @db.Uuid // Organization who can edit this routine
    parentId                String?                  @db.Uuid // Parent routine, if any
    projectId               String?                  @db.Uuid // Project this routine belongs to, if any
    userId                  String?                  @db.Uuid // User who can edit this routine
    version                 String                   @default("1.0.0") @db.VarChar(16) // Arbitrary version number
    comments                comment[]
    createdByUser           user?                    @relation("routine_user_creator", fields: [createdByUserId], references: [id], onDelete: Cascade)
    createdByOrganization   organization?            @relation("routine_organization_creator", fields: [createdByOrganizationId], references: [id], onDelete: Cascade)
    forks                   routine[]                @relation("routine_fork")
    user                    user?                    @relation("routine_user_owner", fields: [userId], references: [id], onDelete: Cascade)
    organization            organization?            @relation("routine_organization_owner", fields: [organizationId], references: [id], onDelete: Cascade)
    project                 project?                 @relation(fields: [projectId], references: [id], onDelete: Cascade)
    inputs                  routine_input[]
    outputs                 routine_output[]
    nodes                   node[] // Defines the nodes of an orchestration (i.e. routine is made up of subroutines)
    nodeLinks               node_link[] // Defines the links of an orchestration
    nodeLists               node_routine_list_item[] // Routine list nodes the routine is a part of
    parent                  routine?                 @relation("routine_fork", fields: [parentId], references: [id], onDelete: SetNull)
    reports                 report[]
    resourceLists           resource_list[]
    runs                    run[]                    @relation("run_routine")
    starredBy               star[]                   @relation("star_routine")
    tags                    routine_tags[] // Categorical tags set by creators or community-voted
    translations            routine_translation[]
    viewedBy                view[]                   @relation("view_routine")
    votes                   vote[]                   @relation("vote_routine")
}

model routine_translation {
    id           String  @id @default(uuid()) @db.Uuid
    description  String? @db.VarChar(2048)
    instructions String  @db.VarChar(8192)
    title        String  @db.VarChar(128)
    language     String  @db.VarChar(3) // ISO 639-2 language code
    routineId    String  @db.Uuid
    routine      routine @relation(fields: [routineId], references: [id], onDelete: Cascade)

    @@unique([routineId, language])
}

// Data for a routine input
model routine_input {
    id           String                      @id @default(uuid()) @db.Uuid
    isRequired   Boolean                     @default(true) // Indicates if the input is required to run the routine
    name         String?                     @db.VarChar(128) // Name of the input. If name exists and matches an output's name, then the output can be used to auto-fill the input
    routineId    String                      @db.Uuid
    standardId   String?                     @db.Uuid
    routine      routine                     @relation(fields: [routineId], references: [id], onDelete: Cascade)
    standard     standard?                   @relation(fields: [standardId], references: [id], onDelete: Cascade)
    translations routine_input_translation[]
}

// NOTE: Name is not translated, since it is used as an identifier
model routine_input_translation {
    id             String        @id @default(uuid()) @db.Uuid
    description    String?       @db.VarChar(2048) // Optional description to override standard's description
    routineInputId String        @db.Uuid
    language       String        @db.VarChar(3) // ISO 639-2 language code
    routineInput   routine_input @relation(fields: [routineInputId], references: [id], onDelete: Cascade)

    @@unique([routineInputId, language])
}

// Data for a routine output
model routine_output {
    id           String                       @id @default(uuid()) @db.Uuid
    name         String?                      @db.VarChar(128) // Name of the output. If name exists and matches an input's name, then the output can be used to auto-fill the input
    routineId    String                       @db.Uuid
    standardId   String?                      @db.Uuid
    routine      routine                      @relation(fields: [routineId], references: [id], onDelete: Cascade)
    standard     standard?                    @relation(fields: [standardId], references: [id], onDelete: Cascade)
    translations routine_output_translation[]
}

// NOTE: Name is not translated, since it is used as an identifier
model routine_output_translation {
    id              String         @id @default(uuid()) @db.Uuid
    description     String?        @db.VarChar(2048) // Optional description to override standard's description
    routineOutputId String         @db.Uuid
    language        String         @db.VarChar(3) // ISO 639-2 language code
    routineOutput   routine_output @relation(fields: [routineOutputId], references: [id], onDelete: Cascade)

    @@unique([routineOutputId, language])
}

// Many-to-many relationship between routines and tags
model routine_tags {
    id       String  @id @default(uuid()) @db.Uuid
    taggedId String  @db.Uuid
    tagId    String  @db.Uuid
    tagged   routine @relation(fields: [taggedId], references: [id], onDelete: Cascade)
    tag      tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@unique([taggedId, tagId], name: "routine_tags_taggedid_tagid_unique")
}

//==============================================================
// #endregion
//==============================================================

//==============================================================
// #region Run
//==============================================================
// Stores information about individual runs of a routine.
// Can be multiple per routine/user combination.
//==============================================================

model run {
    id                  String     @id @default(uuid()) @db.Uuid
    created_at          DateTime   @default(now()) @db.Timestamptz(6)
    updated_at          DateTime   @default(now()) @db.Timestamptz(6)
    completedComplexity Int        @default(0) // Complexity of routine which was already completed. Used to measure progress more accurately than just the number of nodes completed.
    pickups             Int        @default(1) // Measures context switches. 1 means that the routine was executed completely without leaving
    timeStarted         DateTime?  @db.Timestamptz(6)
    timeElapsed         Int? // Time spent working on the run, in seconds
    timeCompleted       DateTime?  @db.Timestamptz(6)
    title               String     @db.VarChar(128) // Title of viewed item, as it appears to the user. Makes searching for items that changed names easier
    status              RunStatus  @default(Scheduled)
    version             String     @db.VarChar(16) // Version of routine being run. Used to determine if routine has changed since run was started
    routineId           String?    @db.Uuid
    userId              String     @db.Uuid
    routine             routine?   @relation("run_routine", fields: [routineId], references: [id], onDelete: SetNull)
    steps               run_step[]
    user                user       @relation("run_user", fields: [userId], references: [id])
}

// Individual step of a run. Used to store progress, and additional metrics for each step.
// Steps may be executed multiple times (i.e. loops), so duplicate steps are allowed.
model run_step {
    id            String        @id @default(uuid()) @db.Uuid
    order         Int // Execution order of the step. Routines don't need to be completed linearly 
    pickups       Int           @default(1) // Measures context switches. 1 means that the step was executed completely without leaving
    runId         String        @db.Uuid
    nodeId        String        @db.Uuid
    timeStarted   DateTime?     @db.Timestamptz(6)
    timeElapsed   Int? // Time spent working on the step, in seconds
    timeCompleted DateTime?     @db.Timestamptz(6)
    step          Int[]
    status        RunStepStatus @default(InProgress)
    run           run           @relation(fields: [runId], references: [id], onDelete: Cascade)
    title         String        @db.VarChar(128) // Title of viewed item, as it appears to the user. Makes searching for items that changed names easier
    node          node          @relation(fields: [nodeId], references: [id], onDelete: SetNull)
}

// TODO scheduling runs
// // Schedules a routine to run at a specific time - once or repeatedly
// // Can be triggered based on time or conditions
// model run_schedule {

// }

//==============================================================
// #endregion Run
//==============================================================

//==============================================================
// #region Standard
//==============================================================

// Data standard for a routine input or output
model standard {
    id                      String                 @id @default(uuid()) @db.Uuid
    created_at              DateTime               @default(now()) @db.Timestamptz(6)
    updated_at              DateTime               @default(now()) @db.Timestamptz(6)
    default                 String?                @db.VarChar(1024) // Default value
    isFile                  Boolean                @default(false) // Indicates if the data is a file. If this is the case, then the schema is interpreted as file metadata
    name                    String                 @db.VarChar(128)
    score                   Int                    @default(0) // Count of all upvotes - downvotes. Easier to store than calculate on the fly.
    stars                   Int                    @default(0) // Count of all stars. Makes queries easier than counting the relationship every time
    type                    String // Type of standard. We don't bother with an enum here, since the supported types may change often
    props                  String                 @db.VarChar(8192) // JSON object describing the shape of the data
    yup                    String?                    @db.VarChar(8192) // Yup validation checks. (ex: If standard is a URL, then yup would contain a regex to validate it)
    version                 String                 @default("1.0.0") @db.VarChar(16) // Arbitrary version number
    views                   Int                    @default(0) // Count of all views. Makes queries easier than counting the relationship every time
    createdByUserId         String?                @db.Uuid // User who created the standard, if exists (could have been created anonymously or by an organization)
    createdByOrganizationId String?                @db.Uuid // Organization who created the standard, if exists (could have been created anonymously or by a user)
    comments                comment[]
    createdByUser           user?                  @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
    createdByOrganization   organization?          @relation(fields: [createdByOrganizationId], references: [id], onDelete: Cascade)
    reports                 report[]
    routineInputs           routine_input[]
    routineOutputs          routine_output[]
    starredBy               star[]                 @relation("star_standard")
    tags                    standard_tags[] // Categorical tags set by creators or community-voted
    translations            standard_translation[]
    viewedBy                view[]                 @relation("view_standard")
    votes                   vote[]                 @relation("vote_standard")

    // A user or organization cannot update a standard once it has been published (except for its description and tags).
    // Therefore, it must create the standard with a new version number.
    @@unique([createdByUserId, createdByOrganizationId, name, version], name: "standard_createdByUserId_createdByOrganizationId_name_version_unique")
}

// NOTE: standard name is not translated because it is used as a unique identifier. Think of standard names like CIP proposals.
// There isn't a translation for CIP-0030 - that's just its name
model standard_translation {
    id          String   @id @default(uuid()) @db.Uuid
    description String?  @db.VarChar(2048)
    standardId  String   @db.Uuid
    language    String   @db.VarChar(3) // ISO 639-2 language code
    standard    standard @relation(fields: [standardId], references: [id], onDelete: Cascade)

    @@unique([standardId, language])
}

// Many-to-many relationship between standards and tags
model standard_tags {
    id       String   @id @default(uuid()) @db.Uuid
    taggedId String   @db.Uuid
    tagId    String   @db.Uuid
    tagged   standard @relation(fields: [taggedId], references: [id], onDelete: Cascade)
    tag      tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@unique([taggedId, tagId], name: "standard_tags_taggedid_tagid_unique")
}

//==============================================================
// #endregion
//==============================================================

//==============================================================
// #region Star
//==============================================================
// Objects can only be starred by a user, not an organization.
// If a user wants to promote another's work, they can put it in a resource list.
// Stars can be applied to organizations, projects, routines, standards, tags, and users
//==============================================================

model star {
    id             String        @id @default(uuid()) @db.Uuid
    byId           String        @db.Uuid // ID of user who voted
    commentId      String?       @db.Uuid
    organizationId String?       @db.Uuid
    projectId      String?       @db.Uuid
    routineId      String?       @db.Uuid
    standardId     String?       @db.Uuid
    tagId          String?       @db.Uuid
    userId         String?       @db.Uuid // ID of user being starred
    by             user          @relation("star_by", fields: [byId], references: [id])
    comment        comment?      @relation("star_comment", fields: [commentId], references: [id])
    organization   organization? @relation("star_organization", fields: [organizationId], references: [id])
    project        project?      @relation("star_project", fields: [projectId], references: [id], onDelete: Cascade)
    routine        routine?      @relation("star_routine", fields: [routineId], references: [id], onDelete: Cascade)
    standard       standard?     @relation("star_standard", fields: [standardId], references: [id], onDelete: Cascade)
    tag            tag?          @relation("star_tag", fields: [tagId], references: [id], onDelete: Cascade)
    user           user?         @relation("star_user", fields: [userId], references: [id])
}

//==============================================================
// #endregion Star
//==============================================================

//==============================================================
// #region Tag
//==============================================================

// Tags are used to categorize an object
model tag {
    id              String              @id @default(uuid()) @db.Uuid
    created_at      DateTime            @default(now()) @db.Timestamptz(6)
    updated_at      DateTime            @default(now()) @db.Timestamptz(6)
    tag             String              @unique @db.VarChar(128)
    createdByUserId String?             @db.Uuid // User who created the tag
    createdByUser   user?               @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
    organizations   organization_tags[]
    projects        project_tags[]
    routines        routine_tags[]
    standards       standard_tags[]
    hiddenBy        user_tag_hidden[] // Users who are hiding the tag
    stars           Int                 @default(0) // Count of all stars. Makes queries easier than counting the relationship every time
    starredBy       star[]              @relation("star_tag")
    reports         report[]
    translations    tag_translation[]
}

// Tag text is not translated because it would be a massive headache to do so.
model tag_translation {
    id          String  @id @default(uuid()) @db.Uuid
    description String? @db.VarChar(2048)
    tagId       String  @db.Uuid
    language    String  @db.VarChar(3) // ISO 639-2 language code
    tag         tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@unique([tagId, language])
}

//==============================================================
// #endregion
//==============================================================

//==============================================================
// #region User
//==============================================================

// A user of the system
model user {
    id                             String               @id @default(uuid()) @db.Uuid
    created_at                     DateTime             @default(now()) @db.Timestamptz(6)
    updated_at                     DateTime             @default(now()) @db.Timestamptz(6)
    confirmationCode               String?              @unique @db.VarChar(256)
    confirmationCodeDate           DateTime?            @db.Timestamptz(6)
    lastExport                     DateTime?            @db.Timestamptz(6)
    lastLoginAttempt               DateTime             @default(now()) @db.Timestamptz(6) // Time of last failed login attempt
    lastResetPasswordReqestAttempt DateTime?            @db.Timestamptz(6)
    logInAttempts                  Int                  @default(0)
    lastSessionVerified            DateTime?            @db.Timestamptz(6) // Time of last login, or verified session token
    numExports                     Int                  @default(0)
    password                       String?              @db.VarChar(256)
    resetPasswordCode              String?              @unique @db.VarChar(256)
    sessionToken                   String?              @db.VarChar(1024)
    name                           String               @db.VarChar(128) // Display name. Unlike organizations, does not change between languages
    theme                          String               @default("light") @db.VarChar(255)
    handle                         String?              @unique @db.VarChar(16) // Must match ADA Handle of verified wallet linked to user
    stars                          Int                  @default(0) // Count of all stars the user has RECEIVED, not given. Makes queries easier than counting the relationship every time
    views                          Int                  @default(0) // Count of all views. Makes queries easier than counting the relationship every time
    status                         AccountStatus        @default(Unlocked)
    comments                       comment[]
    emails                         email[]
    hiddenTags                     user_tag_hidden[]
    languages                      user_language[]
    reports                        report[]
    resourceLists                  resource_list[]
    roles                          user_roles[]
    standards                      standard[]
    tags                           tag[] // Tags the user CREATED - not tags applied to the user's profile
    organizations                  organization_users[] // Projects the user is a member of
    projects                       project[]            @relation("project_user_owner") // Projects that the user can control
    projectsCreated                project[]            @relation("project_user_creator") // Projects that the user created, but cannot necessarily control
    routines                       routine[]            @relation("routine_user_owner") // Routines the user can control
    routinesCreated                routine[]            @relation("routine_user_creator") // Routines the user created, but cannot necessarily control
    runs                           run[]                @relation("run_user")
    sentReports                    report[]             @relation("report_from")
    starred                        star[]               @relation("star_by")
    starredBy                      star[]               @relation("star_user")
    translations                   user_translation[]
    votes                          vote[]               @relation("vote_by") // Votes the user has cast, NOT votes the user has received (since users can't be voted on)
    viewed                         view[]               @relation("view_by")
    viewedBy                       view[]               @relation("view_user")
    wallets                        wallet[]
}

model user_translation {
    id       String  @id @default(uuid()) @db.Uuid
    bio      String? @db.VarChar(2048)
    userId   String  @db.Uuid
    language String  @db.VarChar(3) // ISO 639-2 language code
    user     user    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, language])
}

model user_language {
    id       String @id @default(uuid()) @db.Uuid
    userId   String @db.Uuid
    language String @db.VarChar(3) // ISO 639-2 language code
    user     user   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, language])
}

// Joining table to apply roles to user
model user_roles {
    id     String @id @default(uuid()) @db.Uuid
    userId String @db.Uuid
    roleId String @db.Uuid
    user   user   @relation(fields: [userId], references: [id], onDelete: Cascade)
    role   role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@unique([userId, roleId], name: "user_roles_userid_roleid_unique")
}

// Many-to-many relationship between users and tags they have hidden/blurred
model user_tag_hidden {
    id     String  @id @default(uuid()) @db.Uuid
    isBlur Boolean @default(true) // Determines if content with this tag is hidden completely, or blurred
    userId String  @db.Uuid
    tagId  String  @db.Uuid
    user   user    @relation(fields: [userId], references: [id], onDelete: Cascade)
    tag    tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@unique([userId, tagId], name: "user_tags_hidden_userid_tagid_unique")
}

//==============================================================
// #endregion
//==============================================================

//==============================================================
// #region View
//==============================================================
// Objects can only be viewed by a user, not an organization.
// Views can be applied to organizations, projects, routines, standards, and users
//==============================================================

model view {
    id             String        @id @default(uuid()) @db.Uuid
    lastViewed     DateTime      @default(now()) @db.Timestamptz(6)
    title          String        @db.VarChar(128) // Title of viewed item, as it appears to the user. Makes searching for items that changed names easier
    byId           String        @db.Uuid // ID of user who voted
    organizationId String?       @db.Uuid
    projectId      String?       @db.Uuid
    routineId      String?       @db.Uuid
    standardId     String?       @db.Uuid
    userId         String?       @db.Uuid // ID of user being starred
    by             user          @relation("view_by", fields: [byId], references: [id])
    organization   organization? @relation("view_organization", fields: [organizationId], references: [id])
    project        project?      @relation("view_project", fields: [projectId], references: [id], onDelete: Cascade)
    routine        routine?      @relation("view_routine", fields: [routineId], references: [id], onDelete: Cascade)
    standard       standard?     @relation("view_standard", fields: [standardId], references: [id], onDelete: Cascade)
    user           user?         @relation("view_user", fields: [userId], references: [id])

    @@unique([byId, organizationId, projectId, routineId, standardId, userId])
}

//==============================================================
// #endregion View
//==============================================================

//==============================================================
// #region Vote
//==============================================================
// Votes can be submitted only by a user, not an organization.
// This is to prevent users from voting multiple times for the same object.
// Votes can be applied to comments, projects, routines, standards, and tags.
//==============================================================

model vote {
    id         String    @id @default(uuid()) @db.Uuid
    isUpvote   Boolean   @default(true) // Determines if vote is upvote or downvote
    byId       String    @db.Uuid // ID of user who voted
    commentId  String?   @db.Uuid
    projectId  String?   @db.Uuid
    routineId  String?   @db.Uuid
    standardId String?   @db.Uuid
    by         user      @relation("vote_by", fields: [byId], references: [id])
    comment    comment?  @relation("vote_comment", fields: [commentId], references: [id])
    project    project?  @relation("vote_project", fields: [projectId], references: [id], onDelete: Cascade)
    routine    routine?  @relation("vote_routine", fields: [routineId], references: [id], onDelete: Cascade)
    standard   standard? @relation("vote_standard", fields: [standardId], references: [id], onDelete: Cascade)
}

//==============================================================
// #endregion Vote
//==============================================================

//==============================================================
// #region Wallet
//==============================================================

// Wallet data
model wallet {
    id                String        @id @default(uuid()) @db.Uuid
    stakingAddress    String        @unique @db.VarChar(128) // Synonymous with reward address
    publicAddress     String?       @unique @db.VarChar(128) // Public address of wallet. Not required because there can be many public addresses for a single wallet
    name              String?       @db.VarChar(128) // User-defined name for wallet
    nonce             String?       @db.VarChar(8092)
    nonceCreationTime DateTime?     @db.Timestamptz(6)
    verified          Boolean       @default(false)
    lastVerifiedTime  DateTime?     @db.Timestamptz(6)
    wasReported       Boolean       @default(false) // Indicates if the wallet was part of an account which was taken down
    userId            String?       @db.Uuid
    user              user?         @relation(fields: [userId], references: [id], onDelete: Cascade)
    organizationId    String?       @db.Uuid
    organization      organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    projectId         String?       @db.Uuid
    project           project?      @relation(fields: [projectId], references: [id], onDelete: Cascade)
    handles           handle[]
    created_at        DateTime      @default(now()) @db.Timestamptz(6)
    updated_at        DateTime      @default(now()) @db.Timestamptz(6)
}

//==============================================================
// #endregion
//==============================================================

//==============================================================
// #region Enums
//==============================================================

enum AccountStatus {
    Deleted
    Unlocked
    SoftLocked
    HardLocked
}

enum MemberRole {
    Admin
    Member
    Owner
}

enum NodeType {
    End
    Redirect
    RoutineList
    Start
}

enum ResourceUsedFor {
    Community // e.g. Discord invite link
    Context // e.g. Pitch video link
    Developer // e.g. GitHub readme link with an alternative approach to completing the routine
    Donation // e.g. Patreon link
    ExternalService // e.g. Fill out form link
    Feed // e.g. social media feed
    Install // e.g. Install a required program link
    Learning // e.g. White Paper link
    Notes // e.g. Notion board, notes app
    OfficialWebsite // e.g. Website or Github link
    Proposal // e.g. IdeaScale link
    Related // e.g. Anything that's related to the project, but doesn't fit into any of the other categories
    Researching // e.g. knowledge base, research paper
    Scheduling // e.g. Google calendar, tasking app
    Social // e.g. Twitter, Facebook, Instagram
    Tutorial // e.g. Youtube video link
}

enum ResourceListUsedFor {
    Custom // User-created resource list, which can be deleted
    Display // e.g. Oranization view, Profile page
    Learn // learn dashboard
    Research // research dashboard
    Develop // develop dashboard
}

enum RunStatus {
    Scheduled // Routine is scheduled to run
    InProgress // Routine is currently running
    Completed // Routine has completed running, and was successful
    Failed // Routine has completed running, but failed
    Cancelled // Routine was cancelled
}

// Run steps are only created as the routine is being run, so there is no scheduling
enum RunStepStatus {
    InProgress // Step is currently running
    Completed // Step has completed running
    Skipped // Step was skipped. Only allowed if step is optional
}

//==============================================================
// #endregion
//==============================================================
