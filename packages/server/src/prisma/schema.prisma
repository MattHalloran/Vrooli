generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

// Email data
model email {
  id                      String  @id @default(uuid()) @db.Uuid
  emailAddress            String  @unique @db.VarChar(128)
  receivesDeliveryUpdates Boolean @default(true)
  verified                Boolean @default(false)
  userId                  String? @db.Uuid
  user                    user?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// One item in a routine orchestration
model node {
  id                String             @id @default(uuid()) @db.Uuid
  title             String             @db.VarChar(128)
  description       String?            @db.VarChar(128)
  type              NodeType
  dataCombineId     String?            @db.Uuid
  dataDecisionId    String?            @db.Uuid
  dataEndId         String?            @db.Uuid
  dataLoopId        String?            @db.Uuid
  dataRoutineListId String?            @db.Uuid
  dataRedirectId    String?            @db.Uuid
  dataStartId       String?            @db.Uuid
  previousId        String?            @db.Uuid
  nextId            String?            @db.Uuid
  routineId         String             @db.Uuid
  dataCombine       node_combine?      @relation(fields: [dataCombineId], references: [id], onDelete: Cascade)
  dataDecision      node_decision?     @relation(fields: [dataDecisionId], references: [id], onDelete: Cascade)
  dataEnd           node_end?          @relation(fields: [dataEndId], references: [id], onDelete: Cascade)
  dataLoop          node_loop?         @relation(fields: [dataLoopId], references: [id], onDelete: Cascade)
  dataRoutineList   node_routine_list? @relation(fields: [dataRoutineListId], references: [id], onDelete: Cascade)
  dataRedirect      node_redirect?     @relation(fields: [dataRedirectId], references: [id], onDelete: Cascade)
  dataStart         node_start?        @relation(fields: [dataStartId], references: [id], onDelete: Cascade)
  previous          node?              @relation("Previous", fields: [previousId], references: [id], onDelete: SetNull)
  next              node?              @relation("Next", fields: [nextId], references: [id], onDelete: SetNull)
  routine           routine            @relation(fields: [routineId], references: [id], onDelete: Cascade)
  Previous          node[]             @relation("Previous")
  Next              node[]             @relation("Next")
}

// Data for combine nodes (in addition to fields defined by node table) TODO complete
model node_combine {
  id   String @id @default(uuid()) @db.Uuid
  node node[]
}

// Data for decision nodes (in addition to fields defined by node table)
model node_decision {
  id        String               @id @default(uuid()) @db.Uuid
  decisions node_decision_item[]
  node      node[]
}

// A specific decision in a decision node
model node_decision_item {
  id         String                    @id @default(uuid()) @db.Uuid
  title      String                    @db.VarChar(128)
  decisionId String                    @db.Uuid
  decision   node_decision             @relation(fields: [decisionId], references: [id], onDelete: Cascade)
  when       node_decision_item_case[]
}

// A condition which must be true for a decision item to be available
model node_decision_item_case {
  id        String             @id @default(uuid()) @db.Uuid
  condition String             @db.VarChar(1024) // TODO make this a JSON object
  itemId    String             @db.Uuid
  decision  node_decision_item @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

// Data for end nodes (in addition to fields defined by node table) TODO complete
model node_end {
  id   String @id @default(uuid()) @db.Uuid
  node node[]
}

// Data for loop nodes (in addition to fields defined by node table) TODO complete
model node_loop {
  id   String @id @default(uuid()) @db.Uuid
  node node[]
}

// Data for routine list nodes (in addition to fields defined by node table) TODO complete
model node_routine_list {
  id        String                       @id @default(uuid()) @db.Uuid
  isOrdered Boolean                      @default(false)
  routines  node_routine_list_routines[]
  node      node[]
}

// Many-to-many relationship between routine lists and routines
model node_routine_list_routines {
  id          String            @id @default(uuid()) @db.Uuid
  title       String?           @db.VarChar(128) // Optional title to override routine title
  description String?           @db.VarChar(1024) // Optional description to override routine description
  isOptional  Boolean           @default(false)
  listId      String            @db.Uuid
  routineId   String            @db.Uuid
  list        node_routine_list @relation(fields: [listId], references: [id], onDelete: Cascade)
  routine     routine           @relation(fields: [routineId], references: [id], onDelete: Cascade)

  @@unique([listId, routineId], name: "node_routine_list_routines_listid_routineid_unique")
}

// Data for redirect nodes (in addition to fields defined by node table) TODO complete
model node_redirect {
  id   String @id @default(uuid()) @db.Uuid
  node node[]
}

// Data for start nodes (in addition to fields defined by node table) TODO complete
model node_start {
  id   String @id @default(uuid()) @db.Uuid
  node node[]
}

// DAO information
model organization {
  id                    String                   @id @default(uuid()) @db.Uuid
  name                  String                   @db.VarChar(128)
  description           String                   @db.VarChar(1024)
  resources             organization_resources[]
  wallets               wallet[]
  projects              project_organizations[]
  starredBy             organization_stars[]
  routine_organizations routine_organizations[]
}

// Many-to-many relationship between organizations and resources
model organization_resources {
  id             String       @id @default(uuid()) @db.Uuid
  organizationId String       @db.Uuid
  resourceId     String       @db.Uuid
  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  resource       resource     @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([organizationId, resourceId], name: "organization_resources_organizationid_resourceid_unique")
}

// Many to many relationship between organizations and users who starred them
model organization_stars {
  id             String       @id @default(uuid()) @db.Uuid
  organizationId String       @db.Uuid
  userId         String       @db.Uuid
  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           user         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId], name: "organization_stars_organizationid_userid_unique")
}

// A project is "owned" by organizations and/or users,
// and it can be "starred" by many users
model project {
  id            String                  @id @default(uuid()) @db.Uuid
  name          String                  @db.VarChar(128)
  description   String                  @db.VarChar(1024)
  resources     project_resources[]
  wallets       wallet[]
  users         project_users[]
  organizations project_organizations[]
  starredBy     project_stars[]
  parent        project_forks?          @relation("parent")
  forks         project_forks[]         @relation("fork")
}

// One to many relationship between a project and projects forked from it
model project_forks {
  id       String  @id @default(uuid()) @db.Uuid
  parentId String  @db.Uuid@unique
  forkId   String  @db.Uuid
  parent   project @relation("parent", fields: [parentId], references: [id])
  fork     project @relation("fork", fields: [forkId], references: [id], onDelete: Cascade)

  @@unique([parentId, forkId], name: "project_forks_parentid_forkid_unique")
}

// Many-to-many relationship between projects and organizations
model project_organizations {
  id             String       @id @default(uuid()) @db.Uuid
  projectId      String       @db.Uuid
  organizationId String       @db.Uuid
  project        project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([projectId, organizationId], name: "project_organizations_projectid_organizationid_unique")
}

// Many to many relationship between projects and users
model project_users {
  id        String  @id @default(uuid()) @db.Uuid
  projectId String  @db.Uuid
  userId    String  @db.Uuid
  project   project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId], name: "project_users_projectid_userid_unique")
}

// Many-to-many relationship between projects and resources
model project_resources {
  id         String   @id @default(uuid()) @db.Uuid
  projectId  String   @db.Uuid
  resourceId String   @db.Uuid
  project    project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  resource   resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([projectId, resourceId], name: "project_resources_projectid_resourceid_unique")
}

// Many to many relationship between projects and users who starred them
model project_stars {
  id        String  @id @default(uuid()) @db.Uuid
  projectId String  @db.Uuid
  userId    String  @db.Uuid
  project   project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId], name: "project_stars_projectid_userid_unique")
}

model resource {
  id                           String                         @id @default(uuid()) @db.Uuid
  name                         String                         @db.VarChar(128)
  description                  String                         @db.VarChar(1024)
  link                         String                         @db.VarChar(256) // URL or Vrooli ID (e.g. vrooli:org:12345, vrooli:rou:54321)
  displayUrl                   String                         @db.VarChar(256) // URL for display image. Taken from OpenGraph data if not
  organization_resources       organization_resources[]
  project_resources            project_resources[]
  routine_resources_contextual routine_resources_contextual[]
  routine_resources_external   routine_resources_external[]
  routine_resources_donation   routine_resources_donation[]
  user_resources               user_resources[]
}

// A user role. Each user can have multiple roles
model role {
  id          String       @id @default(uuid()) @db.Uuid
  title       String       @unique @db.VarChar(128)
  description String?      @db.VarChar(2048)
  user_roles  user_roles[]
}

// Routine data
// Like projects, a routine is "owned" by organizations and/or users,
// and it can be "starred" by many users
model routine {
  id                  String                         @id @default(uuid()) @db.Uuid
  version             String                         @default("1.0.0") @db.VarChar(16) // Arbitrary version number
  title               String                         @db.VarChar(128)
  description         String                         @db.VarChar(1024)
  instructions        String                         @db.VarChar(8192) // Plaintext or markdown instructions
  externalLink        String                         @db.VarChar(256) // URL to external resource
  isAutomatable       Boolean                        @default(false) // Indicates if the routine can be run automatically, if all conditions are met
  inputs              routine_input[]
  outputs             routine_output[]
  nodes               node[] // Defines an orchestration (i.e. routine is made up of subroutines)
  contextualResources routine_resources_contextual[] // Resources to provide context to the routine
  externalResources   routine_resources_external[] // Resources for completing steps outside of Vrooli
  donationResources   routine_resources_donation[] // Resources for donation links
  tags                routine_tags[] // Categorical tags set by creators or community-voted
  users               routine_users[] // Users who can edit main routine
  organizations       routine_organizations[] // Organizations who can edit main routine
  starredBy           routine_stars[] // Users who starred the routine
  parent              routine_forks?                 @relation("parent")
  forks               routine_forks[]                @relation("fork")
  nodeLists           node_routine_list_routines[] // Routine list nodes the routine is a part of
}

// One to many relationship between a routine and routines forked from it
model routine_forks {
  id       String  @id @default(uuid()) @db.Uuid
  parentId String  @db.Uuid@unique
  forkId   String  @db.Uuid
  parent   routine @relation("parent", fields: [parentId], references: [id])
  fork     routine @relation("fork", fields: [forkId], references: [id], onDelete: Cascade)

  @@unique([parentId, forkId], name: "routine_forks_parentid_forkid_unique")
}

// Data for a routine input
model routine_input {
  id          String   @id @default(uuid()) @db.Uuid
  name        String?  @db.VarChar(128) // Optional name to override standard's name
  description String?  @db.VarChar(1024) // Optional description to override standard's description
  routineId   String   @db.Uuid
  standardId  String   @db.Uuid
  routine     routine  @relation(fields: [routineId], references: [id], onDelete: Cascade)
  standard    standard @relation(fields: [standardId], references: [id], onDelete: Cascade)
}

// Data for a routine output
model routine_output {
  id          String   @id @default(uuid()) @db.Uuid
  name        String?  @db.VarChar(128) // Optional name to override standard's name
  description String?  @db.VarChar(1024) // Optional description to override standard's description
  routineId   String   @db.Uuid
  standardId  String   @db.Uuid
  routine     routine  @relation(fields: [routineId], references: [id], onDelete: Cascade)
  standard    standard @relation(fields: [standardId], references: [id], onDelete: Cascade)
}

// Many-to-many relationship between routines and tags
model routine_tags {
  id        String  @id @default(uuid()) @db.Uuid
  routineId String  @db.Uuid
  tagId     String  @db.Uuid
  routine   routine @relation(fields: [routineId], references: [id], onDelete: Cascade)
  tag       tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([routineId, tagId], name: "routine_tags_routineid_tagid_unique")
}

// Many-to-many relationship between routines and organizations
model routine_organizations {
  id             String       @id @default(uuid()) @db.Uuid
  routineId      String       @db.Uuid
  organizationId String       @db.Uuid
  routine        routine      @relation(fields: [routineId], references: [id], onDelete: Cascade)
  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([routineId, organizationId], name: "routine_organizations_routineid_organizationid_unique")
}

// Many-to-many relationship between routines and contextual resources
model routine_resources_contextual {
  id         String   @id @default(uuid()) @db.Uuid
  routineId  String   @db.Uuid
  resourceId String   @db.Uuid
  routine    routine  @relation(fields: [routineId], references: [id], onDelete: Cascade)
  resource   resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([routineId, resourceId], name: "routine_resources_contextual_routineid_resourceid_unique")
}

// Many-to-many relationship between routines and external resources
model routine_resources_external {
  id         String   @id @default(uuid()) @db.Uuid
  routineId  String   @db.Uuid
  resourceId String   @db.Uuid
  routine    routine  @relation(fields: [routineId], references: [id], onDelete: Cascade)
  resource   resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([routineId, resourceId], name: "routine_resources_external_routineid_resourceid_unique")
}

// Many-to-many relationship between routines and donation resources
model routine_resources_donation {
  id         String   @id @default(uuid()) @db.Uuid
  routineId  String   @db.Uuid
  resourceId String   @db.Uuid
  routine    routine  @relation(fields: [routineId], references: [id], onDelete: Cascade)
  resource   resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([routineId, resourceId], name: "routine_resources_donation_routineid_resourceid_unique")
}

// Many to many relationship between routines and users who starred them
model routine_stars {
  id        String  @id @default(uuid()) @db.Uuid
  routineId String  @db.Uuid
  userId    String  @db.Uuid
  routine   routine @relation(fields: [routineId], references: [id], onDelete: Cascade)
  user      user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([routineId, userId], name: "routine_stars_routineid_userid_unique")
}

// Many to many relationship between routines and users
model routine_users {
  id        String  @id @default(uuid()) @db.Uuid
  routineId String  @db.Uuid
  userId    String  @db.Uuid
  routine   routine @relation(fields: [routineId], references: [id], onDelete: Cascade)
  user      user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([routineId, userId], name: "routine_users_routineid_userid_unique")
}

// Data standard for a routine input or output
model standard {
  id             String           @id @default(uuid()) @db.Uuid
  name           String           @default("") @db.VarChar(128)
  description    String           @default("") @db.VarChar(1024)
  type           String           @db.VarChar(32) // Type of data (e.g. "string", "number", "boolean", "object", "array", "file", "url")
  isRequired     Boolean          @default(false) // Indicates if the data is required
  default        String?          @db.VarChar(1024) // Default value
  min            String?          @db.VarChar(1024) // Minimum value
  max            String?          @db.VarChar(1024) // Maximum value
  pattern        String?          @db.VarChar(1024) // Regular expression pattern
  enum           String?          @db.VarChar(1024) // Enumerated values
  tags           standard_tags[] // Categorical tags set by creators or community-voted
  // TODO add relationships to routines that use this standard
  routine_input  routine_input[]
  routine_output routine_output[]
}

// Many-to-many relationship between standards and tags
model standard_tags {
  id         String   @id @default(uuid()) @db.Uuid
  standardId String   @db.Uuid
  tagId      String   @db.Uuid
  standard   standard @relation(fields: [standardId], references: [id], onDelete: Cascade)
  tag        tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([standardId, tagId], name: "standard_tags_standardid_tagid_unique")
}

// Tags are used to classify routines or standards
model tag {
  id          String          @id @default(uuid()) @db.Uuid
  tag         String          @unique @db.VarChar(128)
  description String?         @db.VarChar(2048)
  routines    routine_tags[]
  standards   standard_tags[]
}

// A user of the system
model user {
  id                             String               @id @default(uuid()) @db.Uuid
  username                       String?              @unique @db.VarChar(128)
  theme                          String               @default("light") @db.VarChar(255)
  password                       String?              @db.VarChar(256)
  loginAttempts                  Int                  @default(0)
  lastLoginAttempt               DateTime             @default(now()) @db.Timestamptz(6)
  sessionToken                   String?              @db.VarChar(1024)
  confirmationCode               String?              @unique @db.VarChar(256)
  confirmationCodeDate           DateTime?            @db.Timestamptz(6)
  resetPasswordCode              String?              @unique @db.VarChar(256)
  lastResetPasswordReqestAttempt DateTime?            @db.Timestamptz(6)
  status                         AccountStatus        @default(UNLOCKED)
  created_at                     DateTime             @default(now()) @db.Timestamptz(6)
  updated_at                     DateTime             @default(now()) @db.Timestamptz(6)
  roles                          user_roles[]
  emails                         email[]
  wallets                        wallet[]
  resources                      user_resources[] // Resources associated with user profile
  projects                       project_users[] // Projects the user can control
  starredProjects                project_stars[]
  starredOrganizations           organization_stars[]
  routine_stars                  routine_stars[]
  routine_users                  routine_users[]
}

// Many-to-many relationship between user and resources
model user_resources {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  resourceId String   @db.Uuid
  user       user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource   resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceId], name: "user_resources_userid_resourceid_unique")
}

// Joining table to apply roles to user
model user_roles {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  roleId String @db.Uuid
  user   user   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId], name: "user_roles_userid_roleid_unique")
}

// Wallet data
model wallet {
  id                String        @id @default(uuid()) @db.Uuid
  publicAddress     String        @unique @db.VarChar(128)
  nonce             String?       @db.VarChar(8092)
  nonceCreationTime DateTime?     @db.Timestamptz(6)
  verified          Boolean       @default(false)
  lastVerifiedTime  DateTime?     @db.Timestamptz(6)
  userId            String?       @db.Uuid
  user              user?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId    String?       @db.Uuid
  organization      organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  projectId         String?       @db.Uuid
  project           project?      @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum TaskStatus {
  UNKNOWN
  FAILED
  ACTIVE
  INACTIVE
  COMPLETED
}

enum AccountStatus {
  DELETED
  UNLOCKED
  SOFT_LOCKED
  HARD_LOCKED
}

enum NodeType {
  COMBINE
  DECISION
  END
  LOOP
  ROUTINE_LIST
  REDIRECT
  START
}
