generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions", "orderByRelation"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model knex_migrations {
  id             Int       @id @default(autoincrement())
  name           String?   @db.VarChar(255)
  batch          Int?
  migration_time DateTime? @db.Timestamptz(6)
}

model knex_migrations_lock {
  index     Int  @id @default(autoincrement())
  is_locked Int?
}

model customer {
  id                             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username                       String           @unique @db.VarChar(128)
  theme                          String           @default("light") @db.VarChar(255)
  password                       String?          @db.VarChar(256)
  loginAttempts                  Int              @default(0)
  lastLoginAttempt               DateTime         @default(now()) @db.Timestamptz(6)
  sessionToken                   String?          @db.VarChar(1024)
  confirmationCode               String?          @unique @db.VarChar(256)
  confirmationCodeDate           DateTime?        @db.Timestamptz(6)
  resetPasswordCode              String?          @unique @db.VarChar(256)
  lastResetPasswordReqestAttempt DateTime?        @db.Timestamptz(6)
  status                         String           @default("Unlocked")
  created_at                     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at                     DateTime         @default(now()) @db.Timestamptz(6)
  roles                          customer_roles[]
  emails                         email[]
  feedback                       feedback[]
}

model customer_roles {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customerId String   @db.Uuid
  roleId     String   @db.Uuid
  customer   customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  role       role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([customerId, roleId], name: "customer_roles_customerid_roleid_unique")
}

model email {
  id                      String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  emailAddress            String    @unique @db.VarChar(128)
  receivesDeliveryUpdates Boolean   @default(true)
  verified           Boolean   @default(false)
  customerId              String?   @db.Uuid
  customer                customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model feedback {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  text       String    @db.VarChar(4096)
  customerId String?   @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime  @default(now()) @db.Timestamptz(6)
  customer   customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model image {
  hash            String         @unique @db.VarChar(128)
  alt             String?        @db.VarChar(256)
  description     String?        @db.VarChar(1024)
  usedFor         String?
  created_at      DateTime       @default(now()) @db.Timestamptz(6)
  updated_at      DateTime       @default(now()) @db.Timestamptz(6)
  files           image_file[]
  labels          image_labels[]
}

model image_file {
  hash   String @db.VarChar(128)
  src    String @unique @db.VarChar(256)
  width  Int
  height Int
  image  image  @relation(fields: [hash], references: [hash], onDelete: Cascade)
}

model image_labels {
  id    Int    @id @default(autoincrement())
  hash  String @db.VarChar(128)
  label String @db.VarChar(255)
  index Int
  image image  @relation(fields: [hash], references: [hash], onDelete: Cascade)

  @@unique([hash, label], name: "image_labels_hash_label_unique")
}

model queue_task {
  id          Int      @id @default(autoincrement())
  taskId      Int
  name        String   @db.VarChar(256)
  status      String   @default("Active")
  description String?  @db.VarChar(1024)
  result      String?  @db.VarChar(8192)
  resultCode  Int?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
}

model role {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title          String           @unique @db.VarChar(128)
  description    String?          @db.VarChar(2048)
  customer_roles customer_roles[]
}