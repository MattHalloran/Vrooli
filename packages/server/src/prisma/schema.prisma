generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

// A user of the system
model customer {
  id                             String           @id @default(uuid()) @db.Uuid
  username                       String?          @unique @db.VarChar(128)
  theme                          String           @default("light") @db.VarChar(255)
  password                       String?          @db.VarChar(256)
  loginAttempts                  Int              @default(0)
  lastLoginAttempt               DateTime         @default(now()) @db.Timestamptz(6)
  sessionToken                   String?          @db.VarChar(1024)
  confirmationCode               String?          @unique @db.VarChar(256)
  confirmationCodeDate           DateTime?        @db.Timestamptz(6)
  resetPasswordCode              String?          @unique @db.VarChar(256)
  lastResetPasswordReqestAttempt DateTime?        @db.Timestamptz(6)
  status                         AccountStatus    @default(UNLOCKED)
  created_at                     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at                     DateTime         @default(now()) @db.Timestamptz(6)
  roles                          customer_roles[]
  emails                         email[]
  wallets                        wallet[]
}

// Joining table to apply roles to customers
model customer_roles {
  id         String   @id @default(uuid()) @db.Uuid
  customerId String   @db.Uuid
  roleId     String   @db.Uuid
  customer   customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  role       role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([customerId, roleId], name: "customer_roles_customerid_roleid_unique")
}

// Email data
model email {
  id                      String    @id @default(uuid()) @db.Uuid
  emailAddress            String    @unique @db.VarChar(128)
  receivesDeliveryUpdates Boolean   @default(true)
  verified                Boolean   @default(false)
  customerId              String?   @db.Uuid
  customer                customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

// A user role. Each user can have multiple roles
model role {
  id             String           @id @default(uuid()) @db.Uuid
  title          String           @unique @db.VarChar(128)
  description    String?          @db.VarChar(2048)
  customer_roles customer_roles[]
}

// Wallet data
model wallet {
    id                String    @id @default(uuid()) @db.Uuid
    publicAddress     String    @unique @db.VarChar(128)
    nonce             String?   @db.VarChar(8092)
    nonceCreationTime DateTime? @db.Timestamptz(6)
    verified          Boolean   @default(false)
    customerId        String?   @db.Uuid
    customer          customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

enum TaskStatus {
    UNKNOWN
    FAILED
    ACTIVE
    INACTIVE
    COMPLETED
}

enum AccountStatus {
    DELETED
    UNLOCKED
    SOFT_LOCKED
    HARD_LOCKED
}